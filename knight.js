// Generated by CoffeeScript 1.8.0
var b, cleanup, high, initMode, knight, lo, out, restore, setHigh, setLED, u0, u1, u2, u3, uArray, usbbase;

b = require('bonescript');

usbbase = '/sys/class/leds/beaglebone:green:usr';

high = b.HIGH;

lo = b.LOW;

out = b.OUTPUT;

u0 = 'USR0';

u1 = 'USR1';

u2 = 'USR2';

u3 = 'USR3';

uArray = [];

uArray.push(u0);

uArray.push(u1);

uArray.push(u2);

uArray.push(u3);


/*
function restore() {
	var p = '/sys/class/leds/beaglebone:green:usr';
	b.digitalWrite('USR0', b.LOW);
	b.digitalWrite('USR1', b.LOW);
	b.digitalWrite('USR2', b.LOW);
	b.digitalWrite('USR3', b.LOW);
	resetUSR0();
	function resetUSR0() {
		b.writeTextFile(p+'0/trigger', 'heartbeat', resetUSR1);
	}
	function resetUSR1() {
		b.writeTextFile(p+'1/trigger', 'mmc0', resetUSR2);
	}
	function resetUSR2() {
		b.writeTextFile(p+'2/trigger', 'cpu0', resetUSR3);
	}
	function resetUSR3() {
		b.writeTextFile(p+'3/trigger', 'mmc1', complete);
	}
	function complete() {
	}
}
 */

restore = function() {
  var complete, resetUSR0, resetUSR1, resetUSR2, resetUSR3;
  resetUSR0 = function() {
    return b.writeTextFile(usbbase + '0/trigger', 'heartbeat', resetUSR1);
  };
  resetUSR1 = function() {
    return b.writeTextFile(usbbase + '1/trigger', 'mmc0', resetUSR2);
  };
  resetUSR2 = function() {
    return b.writeTextFile(usbbase + '2/trigger', 'cpu0', resetUSR3);
  };
  resetUSR3 = function() {
    return b.writeTextFile(usbbase + '3/trigger', 'mmc1', complete);
  };
  complete = function() {
    return console.log('restore complete');
  };
  b.digitalWrite(u0, b.LOW);
  b.digitalWrite(u1, b.LOW);
  b.digitalWrite(u2, b.LOW);
  b.digitalWrite(u3, b.LOW);
};

initMode = function() {
  b.pinMode(u0, out);
  b.pinMode(u1, out);
  b.pinMode(u2, out);
  return b.pinMode(u3, out);
};

setHigh = function() {
  initMode();
  b.digitalWrite(u0, lo);
  b.digitalWrite(u1, lo);
  b.digitalWrite(u2, lo);
  b.digitalWrite(u3, high);
  return setTimeout(function() {
    b.digitalWrite(u3, lo);
    return console.log('done');
  }, 5000);
};

setLED = function(pinnum, onMode, cb, delay) {
  var setOff, setOn;
  setOff = function() {
    return b.digitalWrite(uArray[pinnum], lo);
  };
  setOn = function() {
    return b.digitalWrite(uArray[pinnum], high);
  };
  if (!onMode) {
    setOff();
  } else {
    setOn();
  }
  if (cb) {
    setTimeout(cb, delay);
  }
};

cleanup = function() {
  setLED(0, false);
  setLED(1, false);
  setLED(2, false);
  setLED(3, false);
};

knight = function() {
  var count, currDirection, currLed, delayTime, hiLed, lowLed, maxInterations, maxLedNum, worker;
  delayTime = 100;
  maxLedNum = 4;
  maxInterations = 300;
  count = 0;
  hiLed = 3;
  lowLed = 0;
  currLed = 0;
  currDirection = 1;
  initMode();
  cleanup();
  worker = function() {
    count += 1;
    if (count > maxInterations) {
      cleanup();
      return;
    }
    setLED(currLed, false);
    currLed += currDirection;
    if (currLed > hiLed) {
      currDirection = -1;
      currLed = hiLed + currDirection;
    } else if (currLed < lowLed) {
      currDirection = 1;
      currLed = lowLed + currDirection;
    }
    setLED(currLed, true, worker, delayTime);
  };
  worker();
};

knight();
